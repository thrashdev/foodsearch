// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bindings.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchCreateDishBindingsParams struct {
	ID                  pgtype.UUID
	RestaurantBindingID pgtype.UUID
	GlovoDishID         pgtype.UUID
	YandexDishID        pgtype.UUID
}

type BatchCreateRestaurantBindingParams struct {
	ID                 pgtype.UUID
	GlovoRestaurantID  pgtype.UUID
	YandexRestaurantID pgtype.UUID
}

const getAllRestaurantBindings = `-- name: GetAllRestaurantBindings :many
select id, glovo_restaurant_id, yandex_restaurant_id from restaurant_binding
`

func (q *Queries) GetAllRestaurantBindings(ctx context.Context) ([]RestaurantBinding, error) {
	rows, err := q.db.Query(ctx, getAllRestaurantBindings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RestaurantBinding
	for rows.Next() {
		var i RestaurantBinding
		if err := rows.Scan(&i.ID, &i.GlovoRestaurantID, &i.YandexRestaurantID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRestaurantBindingsToUpdate = `-- name: GetRestaurantBindingsToUpdate :many
select distinct rb.id, rb.glovo_restaurant_id, rb.yandex_restaurant_id from restaurant_binding rb
left join dish_binding db on rb.id = db.restaurant_binding_id
where db.id is NULL
`

func (q *Queries) GetRestaurantBindingsToUpdate(ctx context.Context) ([]RestaurantBinding, error) {
	rows, err := q.db.Query(ctx, getRestaurantBindingsToUpdate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RestaurantBinding
	for rows.Next() {
		var i RestaurantBinding
		if err := rows.Scan(&i.ID, &i.GlovoRestaurantID, &i.YandexRestaurantID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
